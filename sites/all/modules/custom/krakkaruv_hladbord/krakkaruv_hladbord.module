<?php
define('WATCH', 313);
define('LISTEN', 312);
/**
 * Created by PhpStorm.
 * User: drupalviking
 * Date: 23/12/15
 * Time: 11:12
 */

/**
 * Implements hook_menu()
 */
function krakkaruv_hladbord_menu(){
  //Module settings
  $items['admin/content/hladbord'] = array(
    'title' => 'Hlaðborð',
    'description' => 'Allar stillingar fyrir hlaðborðið',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('krakkaruv_hladbord_admin_settings'),
    'access arguments' => array('access administration pages'),
    'file' => 'krakkaruv_hladbord.admin.inc',
    'file path' => drupal_get_path('module', 'krakkaruv_hladbord'),
  );

  $items['pages/demo'] = array(
    'title' => 'Demo page',
    'description' => 'To use for debugging purposes.',
    'page callback' => 'krakkaruv_hladbord_assemble_hladbord',
    'access arguments' => array('access content'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function krakkaruv_hladbord_help($path, $arg) {
  switch ($path) {
    case 'admin/content/krakkaruv_hladbord':
      return t('Settings for the Hladbord page.');

    case 'admin/help#krakkaruv_hladbord':
      $output = '<p>' . t('Settings for the Hladbord page') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function krakkaruv_hladbord_permission() {
  return array(
    'administer krakkaruv_hladbord' => array(
      'title' => t('Administer Hlaðborð module'),
      'description' => t('Perform administration tasks for Hlaðborð module.'),
    ),
    'access krakkaruv_hladbord blocks' => array(
      'title' => t('Access Trails blocks'),
      'description' => t('View blocks generated by the Hlaðborð module.'),
    ),
  );
}

/**
 * Implements hook_corn().
 */

function krakkaruv_hladbord_cron(){
  krakkaruv_hladbord_assemble_hladbord();
}

/**
 * Assembles the Hlaðborð
 *
 * @author Hilmar Kári Hallbjörnsson (drupalviking)
 */
function krakkaruv_hladbord_assemble_hladbord(){
  $watch_number = variable_get('krakkaruv_hladbord_number_of_watch_nodes');
  $listen_number = variable_get('krakkaruv_hladbord_number_of_listen_nodes');
  $first_place_number = variable_get('krakkaruv_hladbord_first_place_tax');
  $fixed_places = explode(',', variable_get('krakkaruv_hladbord_fixed_places'));

  //HP 2016-10-19 : Added affected Node-queue value
  $affected_node_queue = variable_get('krakkaruv_hladbord_affected_queue',1);

  if(strlen($fixed_places[0])==0){
    $fixed_places = null;
  }

  $watch_nodes_array = _krakkaruv_hladbord_query_generator('dagskra', WATCH, null, $watch_number);
  $listen_nodes_array = _krakkaruv_hladbord_query_generator('dagskra', LISTEN, null, $listen_number);

  $nodequeue = nodequeue_load_nodes($affected_node_queue, false, 0, 0, true);

  if(!in_array(1, $fixed_places)){
    $first_place = ($first_place_number == WATCH)
      ? array_shift($watch_nodes_array)
      : array_shift($listen_nodes_array);
  }
  else{
    $first_place = $nodequeue[0];
    array_shift($fixed_places);
  }

  $merged_array = _krakkaruv_hladbord_merge_arrays($watch_nodes_array, $listen_nodes_array);
  shuffle($merged_array);

  //nodequeue_queue_clear(1);

  for($a = 1; $a <= 9; $a++){
    if($a == 1){
      _krakkaruv_hladbord_element_to_queue($first_place->nid, $a, $affected_node_queue);
    }
    elseif(in_array($a, $fixed_places)){
      _krakkaruv_hladbord_element_to_queue($nodequeue[$a-1]->nid, $a, $affected_node_queue);
    }
    else{
      $element = array_shift($merged_array);
      _krakkaruv_hladbord_element_to_queue($element->nid, $a, $affected_node_queue);
    }
  }
}

/**
 * Helper function.  Adds an element to the nodequeue by DB Manipulation.
 *
 * @param $nid int The ID of the node being added
 * @param $pos int The posistion in the queue
 * @author Hilmar Kári Hallbjörnsson (drupalviking)
 */
function _krakkaruv_hladbord_element_to_queue($nid, $pos, $qid){
  db_update('nodequeue_nodes')
    ->fields(array(
      'qid' => $qid,
      'sqid' => 1,
      'nid' => $nid,
      'position' => $pos,
      'timestamp' => time()
    ))
    ->condition('position', $pos, '=')
    ->execute();
}

/**
 * Helper function
 * Array_merge doesn't work as planned, so I wrote this one instead
 *
 * @param $first array First array
 * @param $second array Second array
 * @return array Merged array
 * @author Hilmar Kári Hallbjörnsson (drupalviking)
 */
function _krakkaruv_hladbord_merge_arrays($first, $second){
  foreach($second as $value){
    $first[] = $value;
  }

  return $first;
}

/**
 * Helper function
 *
 * Since most of the Entity Field Queries have the same code, I abstracted into
 * one function, for readability.
 *
 * @param $content_type string Content type machine name
 * @param null $category int Category constant (WATCH or LISTEN)
 * @param null $tags int If $content_type is of type myndband, tags might be
 *        needed to narrow the selection down
 * @param int $limit int How many items do you want
 * @return array
 */
function _krakkaruv_hladbord_query_generator($content_type, $category = null, $tags = null, $limit = 9){
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $content_type)
    ->propertyCondition('status', 1, '=')
    ->fieldCondition('field_recording_file', 'value', 'null', '!=')
    ->propertyOrderBy('created', 'DESC');

  if($category){
    $result = $result->fieldCondition('field_category', 'tid', $category, '=');
  }

  if($tags){
    $result = $result->fieldCondition('field_tog_term_ref', 'tid', $tags, '=');
  }

  $result = $result
    ->range(0, $limit)
    ->execute();

  return array_values(entity_load('node', array_keys($result['node'])));
}
